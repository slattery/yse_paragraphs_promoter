<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\field\Entity\FieldConfig;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\paragraphs\ParagraphsTypeInterface;


/**
 * Implements hook_help().
 */
function yse_paragraphs_promoter_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'help.page.yse_paragraphs_promoter') {
    $text = file_get_contents(__DIR__ . '/README.md');
    if (!Drupal::moduleHandler()->moduleExists('markdown')) {
      return '<pre>' . $text . '</pre>';
    }
    else {
      /** @var \Drupal\markdown\PluginManager\ParserManagerInterface $parser_manager */
      $parser_manager = \Drupal::service('plugin.manager.markdown.parser');
      $parser = $parser_manager->getDefaultParser([
        'render_strategy' => ['type' => 'none'],
      ]);
      return $parser->parse($text);
    }
  }
  return NULL;
}


/**
 * Implements hook_config_schema_info_alter().
 */
function yse_paragraphs_promoter_config_schema_info_alter(&$definitions) {
  $definitions['paragraphs.paragraphs_type.*.third_party.paragraphs_library']['mapping']['create_reusableitem_node'] = [
    'type' => 'boolean',
    'label' => 'Create a ResuableItem node when promoting to a library item.',
  ];
}

function yse_paragraphs_promoter_form_paragraphs_type_form_alter(&$form, FormStateInterface $form_state) {
  // Adds paragraph type grouping to the form.
  /** @var \Drupal\paragraphs\ParagraphsTypeInterface $paragraph_type */
  $paragraph_type = $form_state->getFormObject()->getEntity();
  if ($paragraph_type->id() != 'from_library') {
    $form['create_reusableitem_node'] = [
      '#type' => 'checkbox',
      '#title' => t('Create a ResuableItem node when promoting to a library item'),
      '#default_value' => $paragraph_type->getThirdPartySetting('paragraphs_library', 'create_reusableitem_node', FALSE),
      '#states' => [
        'enabled' => [':input[name="allow_library_conversion"]' => ['checked' => TRUE]],
      ],
    ];
    $form['#entity_builders'][] = 'yse_paragraphs_promoter_form_paragraphs_type_form_builder';
    //TODO control/sync the types available to the yse_reusable_item field config.  Right now it is any.
  }
}

/**
 * Add node creation setting to work with the library items promotion setting.
 *
 */
function yse_paragraphs_promoter_form_paragraphs_type_form_builder($entity_type, ParagraphsTypeInterface $type, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue('create_reusableitem_node') && $form_state->getValue('allow_library_conversion')) {
    $type->setThirdPartySetting('paragraphs_library', 'create_reusableitem_node', $form_state->getValue('create_reusableitem_node'));
  }
  else {
    $type->unsetThirdPartySetting('paragraphs_library', 'create_reusableitem_node');
  }
}



function yse_paragraphs_promoter_paragraphs_library_item_predelete(EntityInterface $library_item) {
  $nids = array_values(
    \Drupal::entityQuery('node')->accessCheck(FALSE)
      ->condition('status', 1)->condition('type', 'yse_reusable_item')
      ->condition('field_reusable_paragraph.entity:paragraph.field_reusable_paragraph.entity:paragraphs_library_item.id', $library_item->id())
      ->execute());

  foreach ($nids as $nid) {
    $storage = \Drupal::entityTypeManager()->getStorage('node');
    $entity = $storage->load($nid);
    if ($entity->isPublished()) {
      $t = $entity->label();
      $entity->setUnpublished();
      $entity->field_reusable_paragraph->removeItem(0);
      $entity->save();
      \Drupal::service('messenger')->addMessage("Library Item Deleted, Node '{$t}' ({$nid}) has been unpublished.");
    }
  }
}

function yse_paragraphs_promoter_paragraphs_library_item_insert(EntityInterface $library_item) {
  // Check that this paragraph type wants a ResuableItem node via getThirdPartySetting
  // $library_item->paragraphs->entity
  $mamatype = $library_item->paragraphs->entity->get('parent_type')->value;
  $itemtype = $library_item->paragraphs->entity->getType();
  $makenode = $library_item->paragraphs->entity->getParagraphType()->getThirdPartySetting('paragraphs_library', 'create_reusableitem_node', FALSE);

  //check to see that this para type allows node creation
  if (!isset($makenode)) {
    return;
  }

  $paranode = \Drupal::entityTypeManager()->getStorage('node')->create(
    [
      'type' => 'yse_reusable_item',
      'title' => $library_item->label(),
    ]
  );
  $paragraph_item = Paragraph::create([
    'type' => 'from_library',
    'field_reusable_paragraph' => $library_item,
  ]);

  $paranode->field_reusable_paragraph->appendItem($paragraph_item);
  $paranode->save();
  \Drupal::service('messenger')->addMessage("Library item promoted, a new node has been created to use in reference fields. Please hit the SAVE button on the form to complete the process.");
}


function yse_paragraphs_promoter_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'paragraphs_library_item') {
    $stored_promoter = \Drupal::service('entity.definition_update_manager')->getFieldStorageDefinition('promoter', $entity_type->id());

    //even though this is the def I get back, I don't get the promoter field back as a field without reloading the def.
    //if (empty($stored_promoter)) {
    $fields['promoter'] = BaseFieldDefinition::create('entity_reference')
      ->setLabel(t('Promoter Node'))
      ->setDescription(t('The node that promoted this item.'))
      ->setRevisionable(TRUE)
      ->setSetting('target_type', 'node')
      ->setSetting('handler', 'default:node')
      ->setDefaultValueCallback('Drupal\yse_paragraphs_promoter\Service\Promoter::getPromoterNid')
      ->setDisplayOptions('view', array(
        'region' => 'hidden',
        'weight' => 0,
      ))
      ->setDisplayOptions('form', array(
        'region' => 'hidden',
        'weight' => 0,
      ))
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);

    \Drupal::service('entity.definition_update_manager')->installFieldStorageDefinition('promoter', $entity_type->id(), 'yse_paragraphs_promoter', $fields['promoter']);
    $stored_def = \Drupal::service('entity.definition_update_manager')->getFieldStorageDefinition('promoter', $entity_type->id());
    \Drupal::service('entity.definition_update_manager')->updateFieldStorageDefinition($stored_def);
    \Drupal::service('entity_type.manager')->clearCachedDefinitions();
    \Drupal::service('entity.definition_update_manager')->updateEntityType($entity_type);

    return $fields;
    //  }
  }
}


/**
 * Implements hook_entity_base_field_info_alter().
 */
function yse_paragraphs_promoter_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'paragraphs_library_item') {
    // Check if the field we want to modify exists.
    if (isset($fields['promoter'])) {
      $existing_bundles = array_keys(\Drupal::service('entity_type.bundle.info')->getBundleInfo('node'));
      // Get the current field settings.
      $settings = $fields['promoter']->getSettings();
      // Update the target_bundles setting.
      $settings['handler_settings']['target_bundles'] = array_combine($existing_bundles, $existing_bundles);
      // Apply the updated settings back to the field.
      $fields['promoter']->setSettings($settings);
    }
  }
}


// cache concerns include promoter node save
// we are bogarting jumper here.  maybe this should be in jumper...
function yse_paragraphs_promoter_preprocess_paragraph(&$variables) {
  //if ($variables['paragraph']->getType() == 'document_wysiwyg_section'){
  if ($variables['paragraph']->get('parent_type')->value == 'paragraphs_library_item') {
    if (!empty($variables['paragraph']->_referringItem)) {
      //get promoter entity
      if ($variables['paragraph']->_referringItem->getRoot()->get('promoter')) {
        $promoter = $variables['paragraph']->_referringItem->getRoot()->get('promoter')->entity;
      }
      //find out if this is the primary reusable_item (this is different from share_path)
      //next check that this is not nested, but it the primary libitem for the field
      //first step is the libitem
      $p = $variables['paragraph']->_referringItem->getRoot()->getEntity();
      //second would be a 'from_libary' paragraph in a field
      if (!empty($p) && $p->getEntityTypeId() == 'paragraphs_library_item') {
        $pp = $p->_referringItem->getRoot()->getEntity();
      }
      if (!empty($pp) && $pp->getEntityTypeId() == 'paragraph' && $pp->getType() == 'from_library') {
        //third would be a node if we were in that position.
        $ppp = $pp->_referringItem->getRoot()->getEntity();
      }
      //check that we aren't in a standalone card which would count as nesting
      //if we are at the top, and not in a card stack, there should be no more fields to traverse
      //we could check for nid match at the route and here as well but we could have self in stack
      if (!empty($ppp) && $ppp->getEntityTypeId() == 'node' && $ppp->getType() == 'yse_reusable_item') {
        $variables['reusable_remote'] = $ppp->_referringItem ? FALSE : TRUE;
      }

      if ($promoter) {
        $variables['promoter_path'] = $promoter->toUrl()->toString();
        $variables['promoter_title'] = $promoter->getTitle();
      }
    }
  }
  //}
}

function yse_paragraphs_promoter_theme_suggestions_field_multiple_value_form_alter(&$suggestions, array $variables) {
  if (isset($variables['element']['#attributes']['data-drupal-selector'])) {
    if ($variables['element']['#attributes']['data-drupal-selector'] == 'edit-field-reusable-paragraph') {
      $suggestions[] = 'field_multiple_value_form__field_embedded_paragraphs';
    }
  }
}

function yse_paragraphs_adopter_theme() {
  return [
    'field_multiple_value_form__field_embedded_paragraphs' => [
      'template' => 'field-multiple-value-form--field-embedded-paragraphs',
      'base hook' => 'field_multiple_value_form',
    ]
  ];
}
